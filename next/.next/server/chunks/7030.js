"use strict";
exports.id = 7030;
exports.ids = [7030];
exports.modules = {

/***/ 27030:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => (/* binding */ components_Status)
});

// EXTERNAL MODULE: external "react/jsx-runtime"
var jsx_runtime_ = __webpack_require__(20997);
// EXTERNAL MODULE: external "react"
var external_react_ = __webpack_require__(16689);
// EXTERNAL MODULE: external "styled-components"
var external_styled_components_ = __webpack_require__(57518);
var external_styled_components_default = /*#__PURE__*/__webpack_require__.n(external_styled_components_);
;// CONCATENATED MODULE: ./modules/core/api/model/booking/bookingStatus.ts
/**
 * Go2kavkaz Backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hello@icerockdev.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ const BookingStatus = {
    WAITING_PARTNER: "WAITING_PARTNER",
    WAITING_PAYMENT: "WAITING_PAYMENT",
    PARTNER_ACCEPTED: "PARTNER_ACCEPTED",
    PAID: "PAID",
    CANCELLED: "CANCELLED"
};

;// CONCATENATED MODULE: ./modules/core/components/Status/styles.ts


const statusColor = (status, dark)=>status === BookingStatus.PAID ? dark ? "#6fcf97" : "rgb(111, 207, 151, 0.3)" : status === BookingStatus.CANCELLED ? dark ? "#de3730" : "rgb(222, 55, 48, 0.3)" : status === BookingStatus.WAITING_PAYMENT ? dark ? "#f29200" : "rgb(242, 146, 0, 0.3)" : status === BookingStatus.WAITING_PARTNER || status === BookingStatus.PARTNER_ACCEPTED ? dark ? "#f29200" : "rgb(5, 49, 118, 0.3)" : "inherit";
const StatusContainer = external_styled_components_default().div.withConfig({
    componentId: "sc-3d156085-0"
})`
  min-width: 120px;
  width: max-content;
  display: flex;
  align-items: center;
  gap: 8px;
  ${({ $bordered  })=>$bordered && external_styled_components_.css`
      padding: 16px;
      border-radius: 8px;
      border: 1px solid #1d7abd;
    `};
`;
const StatusIndicator = external_styled_components_default().div.withConfig({
    componentId: "sc-3d156085-1"
})`
  width: 7px;
  height: 7px;
  border-radius: 7px;
  background-color: ${({ $status  })=>statusColor($status, true)};
`;
const StatusText = external_styled_components_default().span.withConfig({
    componentId: "sc-3d156085-2"
})`
  ${({ theme , isTable  })=>external_styled_components_.css`
    font-family: ${isTable ? theme.font.family.gothicBook : theme.font.family.gothicMedium};
    font-size: ${theme.font.size.body2};
    font-weight: ${theme.font.weight.regular};
    color: ${theme.colors.default};
  `};
  line-height: normal;
  vertical-align: middle;
`;
const StatusMobileContainer = external_styled_components_default().div.withConfig({
    componentId: "sc-3d156085-3"
})`
  width: 100px;
  height: 34px;
  border-radius: 16px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  background-color: ${({ $status  })=>statusColor($status, false)};
`;
const StatusMobileText = external_styled_components_default().p.withConfig({
    componentId: "sc-3d156085-4"
})`
  font-size: 11px;
  text-align: center;
  ${({ theme , $status , isTable  })=>external_styled_components_.css`
    font-family: ${theme.font.family.gothicMedium};
    font-weight: ${isTable ? 400 : 700};
    color: ${statusColor($status, true)};
  `};
`;

// EXTERNAL MODULE: ./modules/core/hooks/useMatchMedia.ts
var useMatchMedia = __webpack_require__(40152);
// EXTERNAL MODULE: ./modules/core/styles/mediaQueries.ts
var mediaQueries = __webpack_require__(80514);
;// CONCATENATED MODULE: ./modules/core/components/Status/index.tsx






const Status = ({ status , bordered , isTable  })=>{
    const isScreenXs = (0,useMatchMedia/* default */.Z)(`(max-width: ${mediaQueries/* breakpoints.xs */.AV.xs}px)`);
    const bookingStatusNames = new Map([
        [
            BookingStatus.WAITING_PARTNER,
            "Ожидание подтверждения"
        ],
        [
            BookingStatus.WAITING_PAYMENT,
            "Ожидание оплаты"
        ],
        [
            BookingStatus.PAID,
            "Оплачено"
        ],
        [
            BookingStatus.CANCELLED,
            "Отменено"
        ],
        [
            BookingStatus.PARTNER_ACCEPTED,
            "Подтверждено партнером"
        ]
    ]);
    return isScreenXs ? /*#__PURE__*/ jsx_runtime_.jsx(StatusMobileContainer, {
        $status: status,
        children: /*#__PURE__*/ jsx_runtime_.jsx(StatusMobileText, {
            $status: status,
            isTable: isTable,
            children: bookingStatusNames.get(status) ?? "-"
        })
    }) : /*#__PURE__*/ (0,jsx_runtime_.jsxs)(StatusContainer, {
        $bordered: bordered,
        children: [
            /*#__PURE__*/ jsx_runtime_.jsx(StatusIndicator, {
                $status: status
            }),
            /*#__PURE__*/ jsx_runtime_.jsx(StatusText, {
                isTable: isTable,
                children: bookingStatusNames.get(status) ?? "-"
            })
        ]
    });
};
/* harmony default export */ const components_Status = (Status);


/***/ })

};
;